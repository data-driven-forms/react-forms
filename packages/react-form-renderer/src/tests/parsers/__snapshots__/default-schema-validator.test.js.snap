// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Default schema validator actionMapper validation should fail if action doesnt exist in the mapper 1`] = `
"
      Action on prop \\"loadOptions\\" in component \\"somecomponent\\" does not exist in ActionMapper.
      ActionMapper has these values: [customAction].
      Use one of them or define new action in the mapper.
    "
`;

exports[`Default schema validator actionMapper validation should fail if action is missing action key 1`] = `
"
      Action on prop \\"loadOptions\\" in component \\"somecomponent\\" has not defined action type as the first element.
      Please, make sure you defined your action in the schema.
      ActionMapper has these values: [customAction]
    "
`;

exports[`Default schema validator actionMapper validation should fail if action is undefined 1`] = `
"
      Action on prop \\"loadOptions\\" in component \\"somecomponent\\" is not an array.
      Please, make sure you defined your action in the schema.
      ActionMapper has these values: [customAction]
    "
`;

exports[`Default schema validator should fail if field component from form fields mapper is not a valid React component. 1`] = `"FormComponent \\"invalidComponent\\" from formFieldsMapper is not a valid React component!"`;

exports[`Default schema validator should fail if field component property is not in form fields mapper. 1`] = `
"
          Component of type \\"blarghs\\" is not present in componentMapper.
          Please make sure \\"blarghs is included in your componentMapper.\\"
          componentMapper has these values: [foo,invalidComponent,tabs]
        "
`;

exports[`Default schema validator should fail if field condition have notMatch property and have not is/pattern. 1`] = `
"
      Error occured in field definition with name: \\"foo\\".
      Field condition must have \\"pattern\\" or \\"is\\" property when \\"notMatch\\" is set! Properties received: [when,isEmpty,notMatch].
    "
`;

exports[`Default schema validator should fail if field condition is missing is key. 1`] = `
"
      Error occured in field definition with name: \\"foo\\".
      Field condition must have one of \\"is\\", \\"isEmpty\\", \\"isNotEmpty\\", \\"pattern\\" property! Properties received: [when].
    "
`;

exports[`Default schema validator should fail if field condition is missing when key. 1`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      Field condition must have \\"when\\" property! Properties received: [].
    "
`;

exports[`Default schema validator should fail if field condition is not correct type. 1`] = `
"
      Error occured in field definition with name: \\"foo\\".
      Field condition must be an object, received string!
    "
`;

exports[`Default schema validator should fail if field condition pattern property is not correct type. 1`] = `
"
      Error occured in field definition with name: \\"foo\\".
      Field condition must have \\"pattern\\" of instance \\"RegExp\\" or \\"string\\"! Instance received: [Number].
    "
`;

exports[`Default schema validator should fail if field condition when property is not correct type. 1`] = `
"
      Error occured in field definition with name: \\"foo\\".
      Field condition property \\"when\\" must be of type \\"string\\", number received!].
    "
`;

exports[`Default schema validator should fail if field item does not have component property 1`] = `"Each fields item must have \\"component\\" property!"`;

exports[`Default schema validator should fail if field item does not have name property 1`] = `"Each fields item must have \\"name\\" property! Name is used as a unique identifier of form fields."`;

exports[`Default schema validator should fail if field item does not have name property but have key 1`] = `"Each fields item must have \\"name\\" property! Name is used as a unique identifier of form fields."`;

exports[`Default schema validator should fail if field validate is not an array. 1`] = `
"
      Error occured in field definition with name: \\"foo\\".
      Field validate property must be an Array, object received!
    "
`;

exports[`Default schema validator should fail if field validate item is an object and does not have type property. 1`] = `
"
        Error occured in field definition with name: \\"foo\\".
        Field validator at index: 0 does not have \\"type\\" property! Properties received: [].
      "
`;

exports[`Default schema validator should fail if field validate item is an object and validator type does not exist. 1`] = `
"
        Error occured in field definition with name: \\"foo\\".
        Field validator at index: 0 does not have correct \\"type\\" property!
        Received \\"magic\\", expected one of: [].
      "
`;

exports[`Default schema validator should fail if field validate item is not an object or a function. 1`] = `
"
        Error occured in field definition with name: \\"foo\\".
        Field validator at index: 0 must be an object or a function, string received!
      "
`;

exports[`Default schema validator should fail if input is not a object 1`] = `"Form Schema must be an object, received array!"`;

exports[`Default schema validator should fail if input object does fields names that is not array 1`] = `"Component of type schema must contain \\"fields\\" property of type array, received type: object!"`;

exports[`Default schema validator should fail if input object does not have fields names 1`] = `"Component of type schema must contain \\"fields\\" property of type array, received undefined!"`;

exports[`Default schema validator should fail validation when sequence is not array 1`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'sequence' property in a field condition must be an array! Received: object.
    "
`;

exports[`Default schema validator should fail validation when sequence is not root condition 1`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'sequence' condition has to be the root condition: \\" condition: { sequence: [ ... ]} \\"
    "
`;

exports[`Default schema validator should fail validation when set is not object 1`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'set' property in action \\"then\\" has to be a object! Received: undefined, isArray: false.
    "
`;

exports[`Default schema validator should fail validation when set is not object 2`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'set' property in action \\"then\\" has to be a object! Received: undefined, isArray: true.
    "
`;

exports[`Default schema validator should fail validation when then/else is not in root condition 1`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'then', 'else' condition keys can be included only in root conditions or in a 'sequence'.
    "
`;

exports[`Default schema validator should fail validation when then/else is not in root condition 2`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'then', 'else' condition keys can be included only in root conditions or in a 'sequence'.
    "
`;

exports[`Default schema validator should fail validation when using "and" and "or" conditions 1`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'and' property in a field condition must be an array! Received: object.
    "
`;

exports[`Default schema validator should fail validation when using "and" and "or" conditions 2`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'or' property in a field condition must be an array! Received: object.
    "
`;

exports[`Default schema validator should fail validation when using "and" and "or" conditions 3`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'and' property in a field condition must be an array! Received: object.
    "
`;

exports[`Default schema validator should fail validation when using wrong data type 1`] = `
"
    Error occured in field definition with name: \\"foo\\".
    Unknow dataType foo. Must be one these values: integer,float,number,boolean,string
    "
`;

exports[`Default schema validator should fail validation when using wrong data type 2`] = `
"
    Error occured in field definition with name: \\"foo\\".
    Unknow dataType. Data type must be string
    "
`;

exports[`Default schema validator should fail validation when visible is not boolean 1`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'visible' property in action \\"then\\" has to be a boolean value! Received: string.
    "
`;

exports[`Default schema validator should fail validation when visible is not boolean 2`] = `
"
      Error occured in field definition with \\"name\\" property: \\"foo\\".
      'visible' property in action \\"else\\" has to be a boolean value! Received: string.
    "
`;
