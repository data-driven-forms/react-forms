// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderForm function should render array field correctly 1`] = `
<ContextWrapper
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "field-array",
          "fields": Array [
            Object {
              "component": "text-field",
              "label": "foo",
              "name": "nested component",
            },
          ],
          "key": "bar",
          "name": "foo",
        },
      ],
    }
  }
>
  <FormRenderer
    buttonsLabels={Object {}}
    clearOnUnmount={false}
    disableSubmit={Array []}
    formFieldsMapper={
      Object {
        "text-field": [Function],
      }
    }
    formType="pf3"
    initialValues={Object {}}
    layoutMapper={
      Object {
        "ArrayFieldWrapper": Symbol(react.fragment),
        "Button": [Function],
        "ButtonGroup": [Function],
        "Col": [Function],
        "Description": [Function],
        "FormGroup": [Function],
        "FormWrapper": [Function],
        "HelpBlock": Symbol(react.fragment),
        "Icon": [Function],
        "Title": [Function],
      }
    }
    onSubmit={[MockFunction]}
    resetAble={false}
    schema={
      Object {
        "fields": Array [
          Object {
            "component": "field-array",
            "fields": Array [
              Object {
                "component": "text-field",
                "label": "foo",
                "name": "nested component",
              },
            ],
            "key": "bar",
            "name": "foo",
          },
        ],
      }
    }
    schemaType="default"
    showFormControls={true}
    uiSchema={Object {}}
  >
    <ReactFinalForm
      decorators={
        Array [
          [Function],
        ]
      }
      initialValues={Object {}}
      mutators={
        Object {
          "insert": [Function],
          "move": [Function],
          "pop": [Function],
          "push": [Function],
          "remove": [Function],
          "shift": [Function],
          "swap": [Function],
          "unshift": [Function],
          "update": [Function],
        }
      }
      onSubmit={[MockFunction]}
      render={[Function]}
      subscription={
        Object {
          "pristine": true,
          "submitting": true,
          "valid": true,
        }
      }
    >
      <WrapperForm>
        <form>
          <FormConditionWrapper>
            <FieldWrapper
              component={[Function]}
              componentType="field-array"
              fields={
                Array [
                  Object {
                    "component": "text-field",
                    "label": "foo",
                    "name": "nested component",
                  },
                ]
              }
              formOptions={
                Object {
                  "batch": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "clearOnUnmount": false,
                  "destroyOnUnregister": false,
                  "focus": [Function],
                  "getFieldState": [Function],
                  "getRegisteredFields": [Function],
                  "getState": [Function],
                  "handleSubmit": [Function],
                  "initialize": [Function],
                  "insert": [Function],
                  "isValidationPaused": [Function],
                  "move": [Function],
                  "onCancel": undefined,
                  "onSubmit": [MockFunction],
                  "pauseValidation": [Function],
                  "pop": [Function],
                  "pristine": true,
                  "push": [Function],
                  "registerField": [Function],
                  "remove": [Function],
                  "renderForm": [Function],
                  "reset": [Function],
                  "resumeValidation": [Function],
                  "setConfig": [Function],
                  "shift": [Function],
                  "submit": [Function],
                  "subscribe": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                  "valid": true,
                }
              }
              key="bar"
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <FieldProvider
                FieldProvider={[Function]}
                arrayValidator={[Function]}
                component={[Function]}
                fields={
                  Array [
                    Object {
                      "component": "text-field",
                      "label": "foo",
                      "name": "nested component",
                    },
                  ]
                }
                formOptions={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "clearOnUnmount": false,
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "handleSubmit": [Function],
                    "initialize": [Function],
                    "insert": [Function],
                    "isValidationPaused": [Function],
                    "move": [Function],
                    "onCancel": undefined,
                    "onSubmit": [MockFunction],
                    "pauseValidation": [Function],
                    "pop": [Function],
                    "pristine": true,
                    "push": [Function],
                    "registerField": [Function],
                    "remove": [Function],
                    "renderForm": [Function],
                    "reset": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "shift": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                    "valid": true,
                  }
                }
                hasFixedItems={false}
                name="foo"
              >
                <ReactFinalForm(Field)
                  FieldProvider={[Function]}
                  arrayValidator={[Function]}
                  component={[Function]}
                  fields={
                    Array [
                      Object {
                        "component": "text-field",
                        "label": "foo",
                        "name": "nested component",
                      },
                    ]
                  }
                  formOptions={
                    Object {
                      "batch": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "clearOnUnmount": false,
                      "destroyOnUnregister": false,
                      "focus": [Function],
                      "getFieldState": [Function],
                      "getRegisteredFields": [Function],
                      "getState": [Function],
                      "handleSubmit": [Function],
                      "initialize": [Function],
                      "insert": [Function],
                      "isValidationPaused": [Function],
                      "move": [Function],
                      "onCancel": undefined,
                      "onSubmit": [MockFunction],
                      "pauseValidation": [Function],
                      "pop": [Function],
                      "pristine": true,
                      "push": [Function],
                      "registerField": [Function],
                      "remove": [Function],
                      "renderForm": [Function],
                      "reset": [Function],
                      "resumeValidation": [Function],
                      "setConfig": [Function],
                      "shift": [Function],
                      "submit": [Function],
                      "subscribe": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                      "valid": true,
                    }
                  }
                  hasFixedItems={false}
                  name="foo"
                >
                  <Field
                    FieldProvider={[Function]}
                    arrayValidator={[Function]}
                    component={[Function]}
                    fields={
                      Array [
                        Object {
                          "component": "text-field",
                          "label": "foo",
                          "name": "nested component",
                        },
                      ]
                    }
                    formOptions={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "clearOnUnmount": false,
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "handleSubmit": [Function],
                        "initialize": [Function],
                        "insert": [Function],
                        "isValidationPaused": [Function],
                        "move": [Function],
                        "onCancel": undefined,
                        "onSubmit": [MockFunction],
                        "pauseValidation": [Function],
                        "pop": [Function],
                        "pristine": true,
                        "push": [Function],
                        "registerField": [Function],
                        "remove": [Function],
                        "renderForm": [Function],
                        "reset": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "shift": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                        "update": [Function],
                        "valid": true,
                      }
                    }
                    format={[Function]}
                    hasFixedItems={false}
                    name="foo"
                    parse={[Function]}
                    reactFinalForm={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "initialize": [Function],
                        "isValidationPaused": [Function],
                        "mutators": Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "shift": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                        },
                        "pauseValidation": [Function],
                        "registerField": [Function],
                        "reset": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                      }
                    }
                  >
                    <Component
                      FieldProvider={[Function]}
                      arrayValidator={[Function]}
                      fields={
                        Array [
                          Object {
                            "component": "text-field",
                            "label": "foo",
                            "name": "nested component",
                          },
                        ]
                      }
                      formOptions={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "clearOnUnmount": false,
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "handleSubmit": [Function],
                          "initialize": [Function],
                          "insert": [Function],
                          "isValidationPaused": [Function],
                          "move": [Function],
                          "onCancel": undefined,
                          "onSubmit": [MockFunction],
                          "pauseValidation": [Function],
                          "pop": [Function],
                          "pristine": true,
                          "push": [Function],
                          "registerField": [Function],
                          "remove": [Function],
                          "renderForm": [Function],
                          "reset": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "shift": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                          "valid": true,
                        }
                      }
                      hasFixedItems={false}
                      input={
                        Object {
                          "name": "foo",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "modified": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "submitting": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                    >
                      <renderArrayField
                        FieldProvider={[Function]}
                        arrayValidator={[Function]}
                        fields={
                          Array [
                            Object {
                              "component": "text-field",
                              "label": "foo",
                              "name": "nested component",
                            },
                          ]
                        }
                        formOptions={
                          Object {
                            "batch": [Function],
                            "blur": [Function],
                            "change": [Function],
                            "clearOnUnmount": false,
                            "destroyOnUnregister": false,
                            "focus": [Function],
                            "getFieldState": [Function],
                            "getRegisteredFields": [Function],
                            "getState": [Function],
                            "handleSubmit": [Function],
                            "initialize": [Function],
                            "insert": [Function],
                            "isValidationPaused": [Function],
                            "move": [Function],
                            "onCancel": undefined,
                            "onSubmit": [MockFunction],
                            "pauseValidation": [Function],
                            "pop": [Function],
                            "pristine": true,
                            "push": [Function],
                            "registerField": [Function],
                            "remove": [Function],
                            "renderForm": [Function],
                            "reset": [Function],
                            "resumeValidation": [Function],
                            "setConfig": [Function],
                            "shift": [Function],
                            "submit": [Function],
                            "subscribe": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                            "update": [Function],
                            "valid": true,
                          }
                        }
                        hasFixedItems={false}
                        input={
                          Object {
                            "name": "foo",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "value": "",
                          }
                        }
                        meta={
                          Object {
                            "active": false,
                            "data": Object {},
                            "dirty": false,
                            "dirtySinceLastSubmit": false,
                            "error": undefined,
                            "initial": undefined,
                            "invalid": false,
                            "modified": false,
                            "pristine": true,
                            "submitError": undefined,
                            "submitFailed": false,
                            "submitSucceeded": false,
                            "submitting": false,
                            "touched": false,
                            "valid": true,
                            "visited": false,
                          }
                        }
                        validate={Array []}
                      >
                        <DynamicArray
                          FieldProvider={[Function]}
                          arrayValidator={[Function]}
                          fieldKey="foo"
                          fields={
                            Array [
                              Object {
                                "component": "text-field",
                                "label": "foo",
                                "name": "nested component",
                              },
                            ]
                          }
                          formOptions={
                            Object {
                              "batch": [Function],
                              "blur": [Function],
                              "change": [Function],
                              "clearOnUnmount": false,
                              "destroyOnUnregister": false,
                              "focus": [Function],
                              "getFieldState": [Function],
                              "getRegisteredFields": [Function],
                              "getState": [Function],
                              "handleSubmit": [Function],
                              "initialize": [Function],
                              "insert": [Function],
                              "isValidationPaused": [Function],
                              "move": [Function],
                              "onCancel": undefined,
                              "onSubmit": [MockFunction],
                              "pauseValidation": [Function],
                              "pop": [Function],
                              "pristine": true,
                              "push": [Function],
                              "registerField": [Function],
                              "remove": [Function],
                              "renderForm": [Function],
                              "reset": [Function],
                              "resumeValidation": [Function],
                              "setConfig": [Function],
                              "shift": [Function],
                              "submit": [Function],
                              "subscribe": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                              "update": [Function],
                              "valid": true,
                            }
                          }
                          hasFixedItems={false}
                          input={
                            Object {
                              "name": "foo",
                              "onBlur": [Function],
                              "onChange": [Function],
                              "onFocus": [Function],
                              "value": "",
                            }
                          }
                          meta={
                            Object {
                              "active": false,
                              "data": Object {},
                              "dirty": false,
                              "dirtySinceLastSubmit": false,
                              "error": undefined,
                              "initial": undefined,
                              "invalid": false,
                              "modified": false,
                              "pristine": true,
                              "submitError": undefined,
                              "submitFailed": false,
                              "submitSucceeded": false,
                              "submitting": false,
                              "touched": false,
                              "valid": true,
                              "visited": false,
                            }
                          }
                          validate={Array []}
                        >
                          <ReactFinalForm(ReactFinalFormFieldArray(4.16.1)(2.0.1))
                            key="foo"
                            name="foo"
                            validate={[Function]}
                          >
                            <ReactFinalFormFieldArray(4.16.1)(2.0.1)
                              name="foo"
                              reactFinalForm={
                                Object {
                                  "batch": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "destroyOnUnregister": false,
                                  "focus": [Function],
                                  "getFieldState": [Function],
                                  "getRegisteredFields": [Function],
                                  "getState": [Function],
                                  "initialize": [Function],
                                  "isValidationPaused": [Function],
                                  "mutators": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "shift": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                    "update": [Function],
                                  },
                                  "pauseValidation": [Function],
                                  "registerField": [Function],
                                  "reset": [Function],
                                  "resumeValidation": [Function],
                                  "setConfig": [Function],
                                  "submit": [Function],
                                  "subscribe": [Function],
                                }
                              }
                              validate={[Function]}
                            >
                              <Col
                                xs={11}
                              >
                                <div
                                  xs={11}
                                />
                              </Col>
                              <Col
                                className="final-form-array-add-container"
                                xs={1}
                              >
                                <div
                                  className="final-form-array-add-container"
                                  xs={1}
                                >
                                  <FormGroup>
                                    <div
                                      style={
                                        Object {
                                          "backgroundColor": "tomato",
                                        }
                                      }
                                    >
                                      <ButtonGroup
                                        className="pull-right"
                                      >
                                        <div
                                          style={
                                            Object {
                                              "backgroundColor": "ivory",
                                            }
                                          }
                                        >
                                          <Button
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              onClick={[Function]}
                                              style={
                                                Object {
                                                  "backgroundColor": "initial",
                                                }
                                              }
                                              type="button"
                                            />
                                          </Button>
                                        </div>
                                      </ButtonGroup>
                                    </div>
                                  </FormGroup>
                                </div>
                              </Col>
                            </ReactFinalFormFieldArray(4.16.1)(2.0.1)>
                          </ReactFinalForm(ReactFinalFormFieldArray(4.16.1)(2.0.1))>
                        </DynamicArray>
                      </renderArrayField>
                    </Component>
                  </Field>
                </ReactFinalForm(Field)>
              </FieldProvider>
            </FieldWrapper>
          </FormConditionWrapper>
          <FormControls
            buttonOrder={
              Array [
                "submit",
                "reset",
                "cancel",
              ]
            }
            canReset={false}
            canSubmit={false}
            cancelLabel="Cancel"
            onReset={[Function]}
            onSubmit={[Function]}
            pristine={true}
            resetLabel="Reset"
            submitLabel="Submit"
          >
            <Col
              xs={12}
            >
              <div
                xs={12}
              >
                <FormGroup>
                  <div
                    style={
                      Object {
                        "backgroundColor": "tomato",
                      }
                    }
                  >
                    <ButtonGroup>
                      <div
                        style={
                          Object {
                            "backgroundColor": "ivory",
                          }
                        }
                      >
                        <Button
                          key="form-submit"
                          label="Submit"
                          onClick={[Function]}
                          type="button"
                          variant="primary"
                        >
                          <button
                            onClick={[Function]}
                            style={
                              Object {
                                "backgroundColor": "red",
                              }
                            }
                            type="button"
                          >
                            Submit
                          </button>
                        </Button>
                      </div>
                    </ButtonGroup>
                  </div>
                </FormGroup>
              </div>
            </Col>
          </FormControls>
        </form>
      </WrapperForm>
    </ReactFinalForm>
  </FormRenderer>
</ContextWrapper>
`;

exports[`renderForm function should render fixed array field correctly 1`] = `
<ContextWrapper
  schema={
    Object {
      "fields": Array [
        Object {
          "additionalItems": Object {
            "component": "text-field",
            "fields": Array [],
            "key": 1,
            "name": "foo",
          },
          "component": "fixed-list",
          "description": "description",
          "fields": Array [
            Object {
              "component": "text-field",
              "label": "foo",
              "name": "nested component",
            },
          ],
          "key": "bar",
          "name": "foo",
          "title": "Title",
        },
      ],
    }
  }
>
  <FormRenderer
    buttonsLabels={Object {}}
    clearOnUnmount={false}
    disableSubmit={Array []}
    formFieldsMapper={
      Object {
        "text-field": [Function],
      }
    }
    formType="pf3"
    initialValues={Object {}}
    layoutMapper={
      Object {
        "ArrayFieldWrapper": Symbol(react.fragment),
        "Button": [Function],
        "ButtonGroup": [Function],
        "Col": [Function],
        "Description": [Function],
        "FormGroup": [Function],
        "FormWrapper": [Function],
        "HelpBlock": Symbol(react.fragment),
        "Icon": [Function],
        "Title": [Function],
      }
    }
    onSubmit={[MockFunction]}
    resetAble={false}
    schema={
      Object {
        "fields": Array [
          Object {
            "additionalItems": Object {
              "component": "text-field",
              "fields": Array [],
              "key": 1,
              "name": "foo",
            },
            "component": "fixed-list",
            "description": "description",
            "fields": Array [
              Object {
                "component": "text-field",
                "label": "foo",
                "name": "nested component",
              },
            ],
            "key": "bar",
            "name": "foo",
            "title": "Title",
          },
        ],
      }
    }
    schemaType="default"
    showFormControls={true}
    uiSchema={Object {}}
  >
    <ReactFinalForm
      decorators={
        Array [
          [Function],
        ]
      }
      initialValues={Object {}}
      mutators={
        Object {
          "insert": [Function],
          "move": [Function],
          "pop": [Function],
          "push": [Function],
          "remove": [Function],
          "shift": [Function],
          "swap": [Function],
          "unshift": [Function],
          "update": [Function],
        }
      }
      onSubmit={[MockFunction]}
      render={[Function]}
      subscription={
        Object {
          "pristine": true,
          "submitting": true,
          "valid": true,
        }
      }
    >
      <WrapperForm>
        <form>
          <FormConditionWrapper>
            <FieldWrapper
              additionalItems={
                Object {
                  "component": "text-field",
                  "fields": Array [],
                  "key": 1,
                  "name": "foo",
                }
              }
              component={[Function]}
              componentType="fixed-list"
              description="description"
              fields={
                Array [
                  Object {
                    "component": "text-field",
                    "label": "foo",
                    "name": "nested component",
                  },
                ]
              }
              formOptions={
                Object {
                  "batch": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "clearOnUnmount": false,
                  "destroyOnUnregister": false,
                  "focus": [Function],
                  "getFieldState": [Function],
                  "getRegisteredFields": [Function],
                  "getState": [Function],
                  "handleSubmit": [Function],
                  "initialize": [Function],
                  "insert": [Function],
                  "isValidationPaused": [Function],
                  "move": [Function],
                  "onCancel": undefined,
                  "onSubmit": [MockFunction],
                  "pauseValidation": [Function],
                  "pop": [Function],
                  "pristine": true,
                  "push": [Function],
                  "registerField": [Function],
                  "remove": [Function],
                  "renderForm": [Function],
                  "reset": [Function],
                  "resumeValidation": [Function],
                  "setConfig": [Function],
                  "shift": [Function],
                  "submit": [Function],
                  "subscribe": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                  "valid": true,
                }
              }
              key="bar"
              name="foo"
              title="Title"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <FieldProvider
                FieldProvider={[Function]}
                additionalItems={
                  Object {
                    "component": "text-field",
                    "fields": Array [],
                    "key": 1,
                    "name": "foo",
                  }
                }
                arrayValidator={[Function]}
                component={[Function]}
                description="description"
                fields={
                  Array [
                    Object {
                      "component": "text-field",
                      "label": "foo",
                      "name": "nested component",
                    },
                  ]
                }
                formOptions={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "clearOnUnmount": false,
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "handleSubmit": [Function],
                    "initialize": [Function],
                    "insert": [Function],
                    "isValidationPaused": [Function],
                    "move": [Function],
                    "onCancel": undefined,
                    "onSubmit": [MockFunction],
                    "pauseValidation": [Function],
                    "pop": [Function],
                    "pristine": true,
                    "push": [Function],
                    "registerField": [Function],
                    "remove": [Function],
                    "renderForm": [Function],
                    "reset": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "shift": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                    "valid": true,
                  }
                }
                hasFixedItems={true}
                name="foo"
                title="Title"
              >
                <ReactFinalForm(Field)
                  FieldProvider={[Function]}
                  additionalItems={
                    Object {
                      "component": "text-field",
                      "fields": Array [],
                      "key": 1,
                      "name": "foo",
                    }
                  }
                  arrayValidator={[Function]}
                  component={[Function]}
                  description="description"
                  fields={
                    Array [
                      Object {
                        "component": "text-field",
                        "label": "foo",
                        "name": "nested component",
                      },
                    ]
                  }
                  formOptions={
                    Object {
                      "batch": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "clearOnUnmount": false,
                      "destroyOnUnregister": false,
                      "focus": [Function],
                      "getFieldState": [Function],
                      "getRegisteredFields": [Function],
                      "getState": [Function],
                      "handleSubmit": [Function],
                      "initialize": [Function],
                      "insert": [Function],
                      "isValidationPaused": [Function],
                      "move": [Function],
                      "onCancel": undefined,
                      "onSubmit": [MockFunction],
                      "pauseValidation": [Function],
                      "pop": [Function],
                      "pristine": true,
                      "push": [Function],
                      "registerField": [Function],
                      "remove": [Function],
                      "renderForm": [Function],
                      "reset": [Function],
                      "resumeValidation": [Function],
                      "setConfig": [Function],
                      "shift": [Function],
                      "submit": [Function],
                      "subscribe": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                      "valid": true,
                    }
                  }
                  hasFixedItems={true}
                  name="foo"
                  title="Title"
                >
                  <Field
                    FieldProvider={[Function]}
                    additionalItems={
                      Object {
                        "component": "text-field",
                        "fields": Array [],
                        "key": 1,
                        "name": "foo",
                      }
                    }
                    arrayValidator={[Function]}
                    component={[Function]}
                    description="description"
                    fields={
                      Array [
                        Object {
                          "component": "text-field",
                          "label": "foo",
                          "name": "nested component",
                        },
                      ]
                    }
                    formOptions={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "clearOnUnmount": false,
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "handleSubmit": [Function],
                        "initialize": [Function],
                        "insert": [Function],
                        "isValidationPaused": [Function],
                        "move": [Function],
                        "onCancel": undefined,
                        "onSubmit": [MockFunction],
                        "pauseValidation": [Function],
                        "pop": [Function],
                        "pristine": true,
                        "push": [Function],
                        "registerField": [Function],
                        "remove": [Function],
                        "renderForm": [Function],
                        "reset": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "shift": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                        "update": [Function],
                        "valid": true,
                      }
                    }
                    format={[Function]}
                    hasFixedItems={true}
                    name="foo"
                    parse={[Function]}
                    reactFinalForm={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "initialize": [Function],
                        "isValidationPaused": [Function],
                        "mutators": Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "shift": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                        },
                        "pauseValidation": [Function],
                        "registerField": [Function],
                        "reset": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                      }
                    }
                    title="Title"
                  >
                    <Component
                      FieldProvider={[Function]}
                      additionalItems={
                        Object {
                          "component": "text-field",
                          "fields": Array [],
                          "key": 1,
                          "name": "foo",
                        }
                      }
                      arrayValidator={[Function]}
                      description="description"
                      fields={
                        Array [
                          Object {
                            "component": "text-field",
                            "label": "foo",
                            "name": "nested component",
                          },
                        ]
                      }
                      formOptions={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "clearOnUnmount": false,
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "handleSubmit": [Function],
                          "initialize": [Function],
                          "insert": [Function],
                          "isValidationPaused": [Function],
                          "move": [Function],
                          "onCancel": undefined,
                          "onSubmit": [MockFunction],
                          "pauseValidation": [Function],
                          "pop": [Function],
                          "pristine": true,
                          "push": [Function],
                          "registerField": [Function],
                          "remove": [Function],
                          "renderForm": [Function],
                          "reset": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "shift": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                          "valid": true,
                        }
                      }
                      hasFixedItems={true}
                      input={
                        Object {
                          "name": "foo",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "modified": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "submitting": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                      title="Title"
                    >
                      <renderArrayField
                        FieldProvider={[Function]}
                        additionalItems={
                          Object {
                            "component": "text-field",
                            "fields": Array [],
                            "key": 1,
                            "name": "foo",
                          }
                        }
                        arrayValidator={[Function]}
                        description="description"
                        fields={
                          Array [
                            Object {
                              "component": "text-field",
                              "label": "foo",
                              "name": "nested component",
                            },
                          ]
                        }
                        formOptions={
                          Object {
                            "batch": [Function],
                            "blur": [Function],
                            "change": [Function],
                            "clearOnUnmount": false,
                            "destroyOnUnregister": false,
                            "focus": [Function],
                            "getFieldState": [Function],
                            "getRegisteredFields": [Function],
                            "getState": [Function],
                            "handleSubmit": [Function],
                            "initialize": [Function],
                            "insert": [Function],
                            "isValidationPaused": [Function],
                            "move": [Function],
                            "onCancel": undefined,
                            "onSubmit": [MockFunction],
                            "pauseValidation": [Function],
                            "pop": [Function],
                            "pristine": true,
                            "push": [Function],
                            "registerField": [Function],
                            "remove": [Function],
                            "renderForm": [Function],
                            "reset": [Function],
                            "resumeValidation": [Function],
                            "setConfig": [Function],
                            "shift": [Function],
                            "submit": [Function],
                            "subscribe": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                            "update": [Function],
                            "valid": true,
                          }
                        }
                        hasFixedItems={true}
                        input={
                          Object {
                            "name": "foo",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "value": "",
                          }
                        }
                        meta={
                          Object {
                            "active": false,
                            "data": Object {},
                            "dirty": false,
                            "dirtySinceLastSubmit": false,
                            "error": undefined,
                            "initial": undefined,
                            "invalid": false,
                            "modified": false,
                            "pristine": true,
                            "submitError": undefined,
                            "submitFailed": false,
                            "submitSucceeded": false,
                            "submitting": false,
                            "touched": false,
                            "valid": true,
                            "visited": false,
                          }
                        }
                        title="Title"
                        validate={Array []}
                      >
                        <FixedArrayField
                          FieldProvider={[Function]}
                          additionalItems={
                            Object {
                              "component": "text-field",
                              "fields": Array [],
                              "key": 1,
                              "name": "foo",
                            }
                          }
                          arrayValidator={[Function]}
                          description="description"
                          fields={
                            Array [
                              Object {
                                "component": "text-field",
                                "label": "foo",
                                "name": "nested component",
                              },
                            ]
                          }
                          formOptions={
                            Object {
                              "batch": [Function],
                              "blur": [Function],
                              "change": [Function],
                              "clearOnUnmount": false,
                              "destroyOnUnregister": false,
                              "focus": [Function],
                              "getFieldState": [Function],
                              "getRegisteredFields": [Function],
                              "getState": [Function],
                              "handleSubmit": [Function],
                              "initialize": [Function],
                              "insert": [Function],
                              "isValidationPaused": [Function],
                              "move": [Function],
                              "onCancel": undefined,
                              "onSubmit": [MockFunction],
                              "pauseValidation": [Function],
                              "pop": [Function],
                              "pristine": true,
                              "push": [Function],
                              "registerField": [Function],
                              "remove": [Function],
                              "renderForm": [Function],
                              "reset": [Function],
                              "resumeValidation": [Function],
                              "setConfig": [Function],
                              "shift": [Function],
                              "submit": [Function],
                              "subscribe": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                              "update": [Function],
                              "valid": true,
                            }
                          }
                          hasFixedItems={true}
                          input={
                            Object {
                              "name": "foo",
                              "onBlur": [Function],
                              "onChange": [Function],
                              "onFocus": [Function],
                              "value": "",
                            }
                          }
                          meta={
                            Object {
                              "active": false,
                              "data": Object {},
                              "dirty": false,
                              "dirtySinceLastSubmit": false,
                              "error": undefined,
                              "initial": undefined,
                              "invalid": false,
                              "modified": false,
                              "pristine": true,
                              "submitError": undefined,
                              "submitFailed": false,
                              "submitSucceeded": false,
                              "submitting": false,
                              "touched": false,
                              "valid": true,
                              "visited": false,
                            }
                          }
                          title="Title"
                          validate={Array []}
                        >
                          <Col
                            xs={12}
                          >
                            <div
                              xs={12}
                            >
                              <h3>
                                Title
                              </h3>
                            </div>
                          </Col>
                          <Col
                            xs={12}
                          >
                            <div
                              xs={12}
                            >
                              <p>
                                description
                              </p>
                            </div>
                          </Col>
                          <FormConditionWrapper>
                            <FieldWrapper
                              component={[Function]}
                              componentType="text-field"
                              formOptions={
                                Object {
                                  "batch": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearOnUnmount": false,
                                  "destroyOnUnregister": false,
                                  "focus": [Function],
                                  "getFieldState": [Function],
                                  "getRegisteredFields": [Function],
                                  "getState": [Function],
                                  "handleSubmit": [Function],
                                  "initialize": [Function],
                                  "insert": [Function],
                                  "isValidationPaused": [Function],
                                  "move": [Function],
                                  "onCancel": undefined,
                                  "onSubmit": [MockFunction],
                                  "pauseValidation": [Function],
                                  "pop": [Function],
                                  "pristine": true,
                                  "push": [Function],
                                  "registerField": [Function],
                                  "remove": [Function],
                                  "renderForm": [Function],
                                  "reset": [Function],
                                  "resumeValidation": [Function],
                                  "setConfig": [Function],
                                  "shift": [Function],
                                  "submit": [Function],
                                  "subscribe": [Function],
                                  "swap": [Function],
                                  "unshift": [Function],
                                  "update": [Function],
                                  "valid": true,
                                }
                              }
                              label="foo"
                              name="nested component"
                              validate={
                                Array [
                                  undefined,
                                ]
                              }
                            >
                              <FieldProvider
                                FieldProvider={[Function]}
                                component={[Function]}
                                formOptions={
                                  Object {
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearOnUnmount": false,
                                    "destroyOnUnregister": false,
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "handleSubmit": [Function],
                                    "initialize": [Function],
                                    "insert": [Function],
                                    "isValidationPaused": [Function],
                                    "move": [Function],
                                    "onCancel": undefined,
                                    "onSubmit": [MockFunction],
                                    "pauseValidation": [Function],
                                    "pop": [Function],
                                    "pristine": true,
                                    "push": [Function],
                                    "registerField": [Function],
                                    "remove": [Function],
                                    "renderForm": [Function],
                                    "reset": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "shift": [Function],
                                    "submit": [Function],
                                    "subscribe": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                    "update": [Function],
                                    "valid": true,
                                  }
                                }
                                label="foo"
                                name="nested component"
                                validate={[Function]}
                              >
                                <ReactFinalForm(Field)
                                  FieldProvider={[Function]}
                                  component={[Function]}
                                  formOptions={
                                    Object {
                                      "batch": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearOnUnmount": false,
                                      "destroyOnUnregister": false,
                                      "focus": [Function],
                                      "getFieldState": [Function],
                                      "getRegisteredFields": [Function],
                                      "getState": [Function],
                                      "handleSubmit": [Function],
                                      "initialize": [Function],
                                      "insert": [Function],
                                      "isValidationPaused": [Function],
                                      "move": [Function],
                                      "onCancel": undefined,
                                      "onSubmit": [MockFunction],
                                      "pauseValidation": [Function],
                                      "pop": [Function],
                                      "pristine": true,
                                      "push": [Function],
                                      "registerField": [Function],
                                      "remove": [Function],
                                      "renderForm": [Function],
                                      "reset": [Function],
                                      "resumeValidation": [Function],
                                      "setConfig": [Function],
                                      "shift": [Function],
                                      "submit": [Function],
                                      "subscribe": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                      "update": [Function],
                                      "valid": true,
                                    }
                                  }
                                  label="foo"
                                  name="nested component"
                                  validate={[Function]}
                                >
                                  <Field
                                    FieldProvider={[Function]}
                                    component={[Function]}
                                    formOptions={
                                      Object {
                                        "batch": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearOnUnmount": false,
                                        "destroyOnUnregister": false,
                                        "focus": [Function],
                                        "getFieldState": [Function],
                                        "getRegisteredFields": [Function],
                                        "getState": [Function],
                                        "handleSubmit": [Function],
                                        "initialize": [Function],
                                        "insert": [Function],
                                        "isValidationPaused": [Function],
                                        "move": [Function],
                                        "onCancel": undefined,
                                        "onSubmit": [MockFunction],
                                        "pauseValidation": [Function],
                                        "pop": [Function],
                                        "pristine": true,
                                        "push": [Function],
                                        "registerField": [Function],
                                        "remove": [Function],
                                        "renderForm": [Function],
                                        "reset": [Function],
                                        "resumeValidation": [Function],
                                        "setConfig": [Function],
                                        "shift": [Function],
                                        "submit": [Function],
                                        "subscribe": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                        "update": [Function],
                                        "valid": true,
                                      }
                                    }
                                    format={[Function]}
                                    label="foo"
                                    name="nested component"
                                    parse={[Function]}
                                    reactFinalForm={
                                      Object {
                                        "batch": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "destroyOnUnregister": false,
                                        "focus": [Function],
                                        "getFieldState": [Function],
                                        "getRegisteredFields": [Function],
                                        "getState": [Function],
                                        "initialize": [Function],
                                        "isValidationPaused": [Function],
                                        "mutators": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "shift": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                          "update": [Function],
                                        },
                                        "pauseValidation": [Function],
                                        "registerField": [Function],
                                        "reset": [Function],
                                        "resumeValidation": [Function],
                                        "setConfig": [Function],
                                        "submit": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                    validate={[Function]}
                                  >
                                    <Component
                                      FieldProvider={[Function]}
                                      formOptions={
                                        Object {
                                          "batch": [Function],
                                          "blur": [Function],
                                          "change": [Function],
                                          "clearOnUnmount": false,
                                          "destroyOnUnregister": false,
                                          "focus": [Function],
                                          "getFieldState": [Function],
                                          "getRegisteredFields": [Function],
                                          "getState": [Function],
                                          "handleSubmit": [Function],
                                          "initialize": [Function],
                                          "insert": [Function],
                                          "isValidationPaused": [Function],
                                          "move": [Function],
                                          "onCancel": undefined,
                                          "onSubmit": [MockFunction],
                                          "pauseValidation": [Function],
                                          "pop": [Function],
                                          "pristine": true,
                                          "push": [Function],
                                          "registerField": [Function],
                                          "remove": [Function],
                                          "renderForm": [Function],
                                          "reset": [Function],
                                          "resumeValidation": [Function],
                                          "setConfig": [Function],
                                          "shift": [Function],
                                          "submit": [Function],
                                          "subscribe": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                          "update": [Function],
                                          "valid": true,
                                        }
                                      }
                                      input={
                                        Object {
                                          "name": "nested component",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label="foo"
                                      meta={
                                        Object {
                                          "active": false,
                                          "data": Object {},
                                          "dirty": false,
                                          "dirtySinceLastSubmit": false,
                                          "error": undefined,
                                          "initial": undefined,
                                          "invalid": false,
                                          "modified": false,
                                          "pristine": true,
                                          "submitError": undefined,
                                          "submitFailed": false,
                                          "submitSucceeded": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                        }
                                      }
                                    >
                                      <div
                                        className="nested-item"
                                      >
                                        Text field
                                      </div>
                                    </Component>
                                  </Field>
                                </ReactFinalForm(Field)>
                              </FieldProvider>
                            </FieldWrapper>
                          </FormConditionWrapper>
                          <FormConditionWrapper>
                            <FieldWrapper
                              component={[Function]}
                              componentType="text-field"
                              fields={Array []}
                              formOptions={
                                Object {
                                  "batch": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearOnUnmount": false,
                                  "destroyOnUnregister": false,
                                  "focus": [Function],
                                  "getFieldState": [Function],
                                  "getRegisteredFields": [Function],
                                  "getState": [Function],
                                  "handleSubmit": [Function],
                                  "initialize": [Function],
                                  "insert": [Function],
                                  "isValidationPaused": [Function],
                                  "move": [Function],
                                  "onCancel": undefined,
                                  "onSubmit": [MockFunction],
                                  "pauseValidation": [Function],
                                  "pop": [Function],
                                  "pristine": true,
                                  "push": [Function],
                                  "registerField": [Function],
                                  "remove": [Function],
                                  "renderForm": [Function],
                                  "reset": [Function],
                                  "resumeValidation": [Function],
                                  "setConfig": [Function],
                                  "shift": [Function],
                                  "submit": [Function],
                                  "subscribe": [Function],
                                  "swap": [Function],
                                  "unshift": [Function],
                                  "update": [Function],
                                  "valid": true,
                                }
                              }
                              key="1"
                              name="foo"
                              validate={
                                Array [
                                  undefined,
                                ]
                              }
                            >
                              <FieldProvider
                                FieldProvider={[Function]}
                                component={[Function]}
                                fields={Array []}
                                formOptions={
                                  Object {
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearOnUnmount": false,
                                    "destroyOnUnregister": false,
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "handleSubmit": [Function],
                                    "initialize": [Function],
                                    "insert": [Function],
                                    "isValidationPaused": [Function],
                                    "move": [Function],
                                    "onCancel": undefined,
                                    "onSubmit": [MockFunction],
                                    "pauseValidation": [Function],
                                    "pop": [Function],
                                    "pristine": true,
                                    "push": [Function],
                                    "registerField": [Function],
                                    "remove": [Function],
                                    "renderForm": [Function],
                                    "reset": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "shift": [Function],
                                    "submit": [Function],
                                    "subscribe": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                    "update": [Function],
                                    "valid": true,
                                  }
                                }
                                name="foo"
                                validate={[Function]}
                              >
                                <ReactFinalForm(Field)
                                  FieldProvider={[Function]}
                                  component={[Function]}
                                  fields={Array []}
                                  formOptions={
                                    Object {
                                      "batch": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearOnUnmount": false,
                                      "destroyOnUnregister": false,
                                      "focus": [Function],
                                      "getFieldState": [Function],
                                      "getRegisteredFields": [Function],
                                      "getState": [Function],
                                      "handleSubmit": [Function],
                                      "initialize": [Function],
                                      "insert": [Function],
                                      "isValidationPaused": [Function],
                                      "move": [Function],
                                      "onCancel": undefined,
                                      "onSubmit": [MockFunction],
                                      "pauseValidation": [Function],
                                      "pop": [Function],
                                      "pristine": true,
                                      "push": [Function],
                                      "registerField": [Function],
                                      "remove": [Function],
                                      "renderForm": [Function],
                                      "reset": [Function],
                                      "resumeValidation": [Function],
                                      "setConfig": [Function],
                                      "shift": [Function],
                                      "submit": [Function],
                                      "subscribe": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                      "update": [Function],
                                      "valid": true,
                                    }
                                  }
                                  name="foo"
                                  validate={[Function]}
                                >
                                  <Field
                                    FieldProvider={[Function]}
                                    component={[Function]}
                                    fields={Array []}
                                    formOptions={
                                      Object {
                                        "batch": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearOnUnmount": false,
                                        "destroyOnUnregister": false,
                                        "focus": [Function],
                                        "getFieldState": [Function],
                                        "getRegisteredFields": [Function],
                                        "getState": [Function],
                                        "handleSubmit": [Function],
                                        "initialize": [Function],
                                        "insert": [Function],
                                        "isValidationPaused": [Function],
                                        "move": [Function],
                                        "onCancel": undefined,
                                        "onSubmit": [MockFunction],
                                        "pauseValidation": [Function],
                                        "pop": [Function],
                                        "pristine": true,
                                        "push": [Function],
                                        "registerField": [Function],
                                        "remove": [Function],
                                        "renderForm": [Function],
                                        "reset": [Function],
                                        "resumeValidation": [Function],
                                        "setConfig": [Function],
                                        "shift": [Function],
                                        "submit": [Function],
                                        "subscribe": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                        "update": [Function],
                                        "valid": true,
                                      }
                                    }
                                    format={[Function]}
                                    name="foo"
                                    parse={[Function]}
                                    reactFinalForm={
                                      Object {
                                        "batch": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "destroyOnUnregister": false,
                                        "focus": [Function],
                                        "getFieldState": [Function],
                                        "getRegisteredFields": [Function],
                                        "getState": [Function],
                                        "initialize": [Function],
                                        "isValidationPaused": [Function],
                                        "mutators": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "shift": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                          "update": [Function],
                                        },
                                        "pauseValidation": [Function],
                                        "registerField": [Function],
                                        "reset": [Function],
                                        "resumeValidation": [Function],
                                        "setConfig": [Function],
                                        "submit": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                    validate={[Function]}
                                  >
                                    <Component
                                      FieldProvider={[Function]}
                                      fields={Array []}
                                      formOptions={
                                        Object {
                                          "batch": [Function],
                                          "blur": [Function],
                                          "change": [Function],
                                          "clearOnUnmount": false,
                                          "destroyOnUnregister": false,
                                          "focus": [Function],
                                          "getFieldState": [Function],
                                          "getRegisteredFields": [Function],
                                          "getState": [Function],
                                          "handleSubmit": [Function],
                                          "initialize": [Function],
                                          "insert": [Function],
                                          "isValidationPaused": [Function],
                                          "move": [Function],
                                          "onCancel": undefined,
                                          "onSubmit": [MockFunction],
                                          "pauseValidation": [Function],
                                          "pop": [Function],
                                          "pristine": true,
                                          "push": [Function],
                                          "registerField": [Function],
                                          "remove": [Function],
                                          "renderForm": [Function],
                                          "reset": [Function],
                                          "resumeValidation": [Function],
                                          "setConfig": [Function],
                                          "shift": [Function],
                                          "submit": [Function],
                                          "subscribe": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                          "update": [Function],
                                          "valid": true,
                                        }
                                      }
                                      input={
                                        Object {
                                          "name": "foo",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "data": Object {},
                                          "dirty": false,
                                          "dirtySinceLastSubmit": false,
                                          "error": undefined,
                                          "initial": undefined,
                                          "invalid": false,
                                          "modified": false,
                                          "pristine": true,
                                          "submitError": undefined,
                                          "submitFailed": false,
                                          "submitSucceeded": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                        }
                                      }
                                    >
                                      <div
                                        className="nested-item"
                                      >
                                        Text field
                                      </div>
                                    </Component>
                                  </Field>
                                </ReactFinalForm(Field)>
                              </FieldProvider>
                            </FieldWrapper>
                          </FormConditionWrapper>
                        </FixedArrayField>
                      </renderArrayField>
                    </Component>
                  </Field>
                </ReactFinalForm(Field)>
              </FieldProvider>
            </FieldWrapper>
          </FormConditionWrapper>
          <FormControls
            buttonOrder={
              Array [
                "submit",
                "reset",
                "cancel",
              ]
            }
            canReset={false}
            canSubmit={false}
            cancelLabel="Cancel"
            onReset={[Function]}
            onSubmit={[Function]}
            pristine={true}
            resetLabel="Reset"
            submitLabel="Submit"
          >
            <Col
              xs={12}
            >
              <div
                xs={12}
              >
                <FormGroup>
                  <div
                    style={
                      Object {
                        "backgroundColor": "tomato",
                      }
                    }
                  >
                    <ButtonGroup>
                      <div
                        style={
                          Object {
                            "backgroundColor": "ivory",
                          }
                        }
                      >
                        <Button
                          key="form-submit"
                          label="Submit"
                          onClick={[Function]}
                          type="button"
                          variant="primary"
                        >
                          <button
                            onClick={[Function]}
                            style={
                              Object {
                                "backgroundColor": "red",
                              }
                            }
                            type="button"
                          >
                            Submit
                          </button>
                        </Button>
                      </div>
                    </ButtonGroup>
                  </div>
                </FormGroup>
              </div>
            </Col>
          </FormControls>
        </form>
      </WrapperForm>
    </ReactFinalForm>
  </FormRenderer>
</ContextWrapper>
`;
