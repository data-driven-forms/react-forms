// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FormRenderer /> should render form from schema 1`] = `
<FormRenderer
  FormTemplate={[Function]}
  clearOnUnmount={false}
  componentMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "radio": [Function],
      "select": [Function],
      "sub-form": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea": [Function],
      "time-picker": [Function],
    }
  }
  initialValues={Object {}}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "text-field",
          "name": "component1",
        },
        Object {
          "component": "select",
          "name": "secret",
        },
      ],
    }
  }
>
  <Component
    clearOnUnmount={false}
    initialValues={Object {}}
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      formFields={
        Array [
          <SingleField
            component="text-field"
            name="component1"
          />,
          <SingleField
            component="select"
            name="secret"
          />,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "text-field",
              "name": "component1",
            },
            Object {
              "component": "select",
              "name": "secret",
            },
          ],
        }
      }
    >
      <FormTemplate
        formFields={
          Array [
            <SingleField
              component="text-field"
              name="component1"
            />,
            <SingleField
              component="select"
              name="secret"
            />,
          ]
        }
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "text-field",
                "name": "component1",
              },
              Object {
                "component": "select",
                "name": "secret",
              },
            ],
          }
        }
      >
        <form
          onSubmit={[Function]}
        >
          <SingleField
            component="text-field"
            key="component1"
            name="component1"
          >
            <FormConditionWrapper
              field={
                Object {
                  "component": "text-field",
                  "name": "component1",
                }
              }
            >
              <FormFieldHideWrapper
                hideField={false}
              >
                <TextField
                  component="text-field"
                  name="component1"
                >
                  <div
                    className="nested-item"
                  >
                    <input
                      id="component1"
                      name="component1"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      value=""
                    />
                  </div>
                </TextField>
              </FormFieldHideWrapper>
            </FormConditionWrapper>
          </SingleField>
          <SingleField
            component="select"
            key="secret"
            name="secret"
          >
            <FormConditionWrapper
              field={
                Object {
                  "component": "select",
                  "name": "secret",
                }
              }
            >
              <FormFieldHideWrapper
                hideField={false}
              >
                <Component
                  component="select"
                  name="secret"
                >
                  <div
                    className="nested-item"
                  >
                    Select field
                  </div>
                </Component>
              </FormFieldHideWrapper>
            </FormConditionWrapper>
          </SingleField>
          <Component>
            <button
              disabled={false}
              type="submit"
            >
              Submit
            </button>
            <button
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Reset
            </button>
            <button
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Cancel
            </button>
          </Component>
        </form>
      </FormTemplate>
    </FormTemplate>
  </Component>
</FormRenderer>
`;

exports[`<FormRenderer /> should render hidden field 1`] = `
<FormRenderer
  FormTemplate={[Function]}
  clearOnUnmount={false}
  componentMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "radio": [Function],
      "select": [Function],
      "sub-form": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea": [Function],
      "time-picker": [Function],
    }
  }
  initialValues={Object {}}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "text-field",
          "label": "Visible",
          "name": "visible",
        },
        Object {
          "component": "text-field",
          "hideField": true,
          "label": "Hidden",
          "name": "hidden",
        },
      ],
    }
  }
>
  <Component
    clearOnUnmount={false}
    initialValues={Object {}}
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      formFields={
        Array [
          <SingleField
            component="text-field"
            label="Visible"
            name="visible"
          />,
          <SingleField
            component="text-field"
            hideField={true}
            label="Hidden"
            name="hidden"
          />,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "text-field",
              "label": "Visible",
              "name": "visible",
            },
            Object {
              "component": "text-field",
              "hideField": true,
              "label": "Hidden",
              "name": "hidden",
            },
          ],
        }
      }
    >
      <FormTemplate
        formFields={
          Array [
            <SingleField
              component="text-field"
              label="Visible"
              name="visible"
            />,
            <SingleField
              component="text-field"
              hideField={true}
              label="Hidden"
              name="hidden"
            />,
          ]
        }
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "text-field",
                "label": "Visible",
                "name": "visible",
              },
              Object {
                "component": "text-field",
                "hideField": true,
                "label": "Hidden",
                "name": "hidden",
              },
            ],
          }
        }
      >
        <form
          onSubmit={[Function]}
        >
          <SingleField
            component="text-field"
            key="visible"
            label="Visible"
            name="visible"
          >
            <FormConditionWrapper
              field={
                Object {
                  "component": "text-field",
                  "label": "Visible",
                  "name": "visible",
                }
              }
            >
              <FormFieldHideWrapper
                hideField={false}
              >
                <TextField
                  component="text-field"
                  label="Visible"
                  name="visible"
                >
                  <div
                    className="nested-item"
                  >
                    <input
                      id="visible"
                      name="visible"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      value=""
                    />
                  </div>
                </TextField>
              </FormFieldHideWrapper>
            </FormConditionWrapper>
          </SingleField>
          <SingleField
            component="text-field"
            hideField={true}
            key="hidden"
            label="Hidden"
            name="hidden"
          >
            <FormConditionWrapper
              field={
                Object {
                  "component": "text-field",
                  "label": "Hidden",
                  "name": "hidden",
                }
              }
            >
              <FormFieldHideWrapper
                hideField={true}
              >
                <div
                  hidden={true}
                >
                  <TextField
                    component="text-field"
                    label="Hidden"
                    name="hidden"
                  >
                    <div
                      className="nested-item"
                    >
                      <input
                        id="hidden"
                        name="hidden"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        value=""
                      />
                    </div>
                  </TextField>
                </div>
              </FormFieldHideWrapper>
            </FormConditionWrapper>
          </SingleField>
          <Component>
            <button
              disabled={false}
              type="submit"
            >
              Submit
            </button>
            <button
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Reset
            </button>
            <button
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Cancel
            </button>
          </Component>
        </form>
      </FormTemplate>
    </FormTemplate>
  </Component>
</FormRenderer>
`;
