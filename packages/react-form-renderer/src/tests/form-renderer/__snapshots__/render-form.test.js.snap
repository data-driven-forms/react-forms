// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderForm function #condition should render condition field only if the condition is met 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "is": "fuzz",
          "when": "bar",
        }
      }
    >
      <Condition
        is="fuzz"
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          />
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the condition is met 2`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "is": "fuzz",
          "when": "bar",
        }
      }
    >
      <Condition
        is="fuzz"
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          >
            <FieldWrapper
              component={[Function]}
              componentType="custom-component"
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <customComponent
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                validate={[Function]}
              >
                <div
                  name="foo"
                  validate={[Function]}
                >
                  Custom component
                </div>
              </customComponent>
            </FieldWrapper>
          </Field>
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the condition is not met 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "is": "fuzz",
          "notMatch": true,
          "when": "bar",
        }
      }
    >
      <Condition
        is="fuzz"
        notMatch={true}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          >
            <FieldWrapper
              component={[Function]}
              componentType="custom-component"
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <customComponent
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                validate={[Function]}
              >
                <div
                  name="foo"
                  validate={[Function]}
                >
                  Custom component
                </div>
              </customComponent>
            </FieldWrapper>
          </Field>
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the condition is not met 2`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "is": "fuzz",
          "notMatch": true,
          "when": "bar",
        }
      }
    >
      <Condition
        is="fuzz"
        notMatch={true}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          >
            <FieldWrapper
              component={[Function]}
              componentType="custom-component"
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <customComponent
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                validate={[Function]}
              >
                <div
                  name="foo"
                  validate={[Function]}
                >
                  Custom component
                </div>
              </customComponent>
            </FieldWrapper>
          </Field>
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the isEmpty condition is met 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "isEmpty": true,
          "when": "bar",
        }
      }
    >
      <Condition
        isEmpty={true}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          >
            <FieldWrapper
              component={[Function]}
              componentType="custom-component"
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <customComponent
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                validate={[Function]}
              >
                <div
                  name="foo"
                  validate={[Function]}
                >
                  Custom component
                </div>
              </customComponent>
            </FieldWrapper>
          </Field>
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the isEmpty condition is met 2`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "isEmpty": true,
          "when": "bar",
        }
      }
    >
      <Condition
        isEmpty={true}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          >
            <FieldWrapper
              component={[Function]}
              componentType="custom-component"
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <customComponent
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                validate={[Function]}
              >
                <div
                  name="foo"
                  validate={[Function]}
                >
                  Custom component
                </div>
              </customComponent>
            </FieldWrapper>
          </Field>
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the isNotEmpty condition is met 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "isNotEmpty": true,
          "when": "bar",
        }
      }
    >
      <Condition
        isNotEmpty={true}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          />
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the isNotEmpty condition is met 2`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "isNotEmpty": true,
          "when": "bar",
        }
      }
    >
      <Condition
        isNotEmpty={true}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          >
            <FieldWrapper
              component={[Function]}
              componentType="custom-component"
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <customComponent
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                validate={[Function]}
              >
                <div
                  name="foo"
                  validate={[Function]}
                >
                  Custom component
                </div>
              </customComponent>
            </FieldWrapper>
          </Field>
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the pattern condition is met 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "pattern": /fuzz/,
          "when": "bar",
        }
      }
    >
      <Condition
        pattern={/fuzz/}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          />
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the pattern condition is met 2`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "pattern": /fuzz/,
          "when": "bar",
        }
      }
    >
      <Condition
        pattern={/fuzz/}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          >
            <FieldWrapper
              component={[Function]}
              componentType="custom-component"
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <customComponent
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                validate={[Function]}
              >
                <div
                  name="foo"
                  validate={[Function]}
                >
                  Custom component
                </div>
              </customComponent>
            </FieldWrapper>
          </Field>
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the pattern condition is not met 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "notMatch": true,
          "pattern": /fuzz/,
          "when": "bar",
        }
      }
    >
      <Condition
        notMatch={true}
        pattern={/fuzz/}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          >
            <FieldWrapper
              component={[Function]}
              componentType="custom-component"
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <customComponent
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                validate={[Function]}
              >
                <div
                  name="foo"
                  validate={[Function]}
                >
                  Custom component
                </div>
              </customComponent>
            </FieldWrapper>
          </Field>
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if the pattern condition is not met 2`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "notMatch": true,
          "pattern": /fuzz/,
          "when": "bar",
        }
      }
    >
      <Condition
        notMatch={true}
        pattern={/fuzz/}
        when="bar"
      >
        <ReactFinalForm(Field)
          name="bar"
          subscription={
            Object {
              "value": true,
            }
          }
        >
          <Field
            format={[Function]}
            name="bar"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            subscription={
              Object {
                "value": true,
              }
            }
          >
            <FieldWrapper
              component={[Function]}
              componentType="custom-component"
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <customComponent
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                validate={[Function]}
              >
                <div
                  name="foo"
                  validate={[Function]}
                >
                  Custom component
                </div>
              </customComponent>
            </FieldWrapper>
          </Field>
        </ReactFinalForm(Field)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render array field 1`] = `
<ContextWrapper
  layoutMapper={
    Object {
      "ArrayFieldWrapper": [Function],
      "Button": [Function],
      "ButtonGroup": [Function],
      "Col": [Function],
      "Description": [Function],
      "FormGroup": [Function],
      "FormWrapper": [Function],
      "HelpBlock": [Function],
      "Icon": [Function],
      "Title": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper>
      <FieldWrapper
        component={[Function]}
        componentType="field-array"
        fields={Array []}
        formOptions={
          Object {
            "renderForm": [Function],
          }
        }
        key="bar"
        name="foo"
        validate={
          Array [
            undefined,
          ]
        }
      >
        <FieldProvider
          FieldProvider={[Function]}
          arrayValidator={[Function]}
          component={[Function]}
          fields={Array []}
          formOptions={
            Object {
              "renderForm": [Function],
            }
          }
          hasFixedItems={false}
          name="foo"
        >
          <ReactFinalForm(Field)
            FieldProvider={[Function]}
            arrayValidator={[Function]}
            component={[Function]}
            fields={Array []}
            formOptions={
              Object {
                "renderForm": [Function],
              }
            }
            hasFixedItems={false}
            name="foo"
          >
            <Field
              FieldProvider={[Function]}
              arrayValidator={[Function]}
              component={[Function]}
              fields={Array []}
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              format={[Function]}
              hasFixedItems={false}
              name="foo"
              parse={[Function]}
              reactFinalForm={
                Object {
                  "batch": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "destroyOnUnregister": false,
                  "focus": [Function],
                  "getFieldState": [Function],
                  "getRegisteredFields": [Function],
                  "getState": [Function],
                  "initialize": [Function],
                  "isValidationPaused": [Function],
                  "mutators": Object {
                    "insert": [Function],
                    "move": [Function],
                    "pop": [Function],
                    "push": [Function],
                    "remove": [Function],
                    "shift": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                  },
                  "pauseValidation": [Function],
                  "registerField": [Function],
                  "reset": [Function],
                  "resumeValidation": [Function],
                  "setConfig": [Function],
                  "submit": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Component
                FieldProvider={[Function]}
                arrayValidator={[Function]}
                fields={Array []}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                hasFixedItems={false}
                input={
                  Object {
                    "name": "foo",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "value": "",
                  }
                }
                meta={
                  Object {
                    "active": false,
                    "data": Object {},
                    "dirty": false,
                    "dirtySinceLastSubmit": false,
                    "error": undefined,
                    "initial": undefined,
                    "invalid": false,
                    "modified": false,
                    "pristine": true,
                    "submitError": undefined,
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "touched": false,
                    "valid": true,
                    "visited": false,
                  }
                }
              >
                <renderArrayField
                  FieldProvider={[Function]}
                  arrayValidator={[Function]}
                  fields={Array []}
                  formOptions={
                    Object {
                      "renderForm": [Function],
                    }
                  }
                  hasFixedItems={false}
                  input={
                    Object {
                      "name": "foo",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "value": "",
                    }
                  }
                  meta={
                    Object {
                      "active": false,
                      "data": Object {},
                      "dirty": false,
                      "dirtySinceLastSubmit": false,
                      "error": undefined,
                      "initial": undefined,
                      "invalid": false,
                      "modified": false,
                      "pristine": true,
                      "submitError": undefined,
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "touched": false,
                      "valid": true,
                      "visited": false,
                    }
                  }
                  validate={Array []}
                >
                  <DynamicArray
                    FieldProvider={[Function]}
                    arrayValidator={[Function]}
                    fieldKey="foo"
                    fields={Array []}
                    formOptions={
                      Object {
                        "renderForm": [Function],
                      }
                    }
                    hasFixedItems={false}
                    input={
                      Object {
                        "name": "foo",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "value": "",
                      }
                    }
                    meta={
                      Object {
                        "active": false,
                        "data": Object {},
                        "dirty": false,
                        "dirtySinceLastSubmit": false,
                        "error": undefined,
                        "initial": undefined,
                        "invalid": false,
                        "modified": false,
                        "pristine": true,
                        "submitError": undefined,
                        "submitFailed": false,
                        "submitSucceeded": false,
                        "submitting": false,
                        "touched": false,
                        "valid": true,
                        "visited": false,
                      }
                    }
                    validate={Array []}
                  >
                    <ReactFinalForm(ReactFinalFormFieldArray(4.16.1)(2.0.1))
                      key="foo"
                      name="foo"
                      validate={[Function]}
                    >
                      <ReactFinalFormFieldArray(4.16.1)(2.0.1)
                        name="foo"
                        reactFinalForm={
                          Object {
                            "batch": [Function],
                            "blur": [Function],
                            "change": [Function],
                            "destroyOnUnregister": false,
                            "focus": [Function],
                            "getFieldState": [Function],
                            "getRegisteredFields": [Function],
                            "getState": [Function],
                            "initialize": [Function],
                            "isValidationPaused": [Function],
                            "mutators": Object {
                              "insert": [Function],
                              "move": [Function],
                              "pop": [Function],
                              "push": [Function],
                              "remove": [Function],
                              "shift": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                              "update": [Function],
                            },
                            "pauseValidation": [Function],
                            "registerField": [Function],
                            "reset": [Function],
                            "resumeValidation": [Function],
                            "setConfig": [Function],
                            "submit": [Function],
                            "subscribe": [Function],
                          }
                        }
                        validate={[Function]}
                      >
                        <Component
                          xs={11}
                        >
                          <div />
                        </Component>
                        <Component
                          className="final-form-array-add-container"
                          xs={1}
                        >
                          <div>
                            <Component>
                              <div>
                                <Component
                                  className="pull-right"
                                >
                                  <div>
                                    <Component
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <button
                                        onClick={[Function]}
                                        type="button"
                                      />
                                    </Component>
                                  </div>
                                </Component>
                              </div>
                            </Component>
                          </div>
                        </Component>
                      </ReactFinalFormFieldArray(4.16.1)(2.0.1)>
                    </ReactFinalForm(ReactFinalFormFieldArray(4.16.1)(2.0.1))>
                  </DynamicArray>
                </renderArrayField>
              </Component>
            </Field>
          </ReactFinalForm(Field)>
        </FieldProvider>
      </FieldWrapper>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render single field form with custom componentType and assign FieldProvider 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper>
      <FieldWrapper
        assignFieldProvider={true}
        component={[Function]}
        componentType="custom-component"
        formOptions={
          Object {
            "renderForm": [Function],
          }
        }
        name="foo"
        validate={
          Array [
            undefined,
          ]
        }
      >
        <customComponent
          FieldProvider={[Function]}
          assignFieldProvider={true}
          formOptions={
            Object {
              "renderForm": [Function],
            }
          }
          name="foo"
          validate={[Function]}
        >
          <FieldProvider
            assignFieldProvider={true}
            formOptions={Object {}}
            name="foo"
            render={[Function]}
            validate={[Function]}
          >
            <ReactFinalForm(Field)
              assignFieldProvider={true}
              formOptions={Object {}}
              name="foo"
              render={[Function]}
              validate={[Function]}
            >
              <Field
                assignFieldProvider={true}
                formOptions={Object {}}
                format={[Function]}
                name="foo"
                parse={[Function]}
                reactFinalForm={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "initialize": [Function],
                    "isValidationPaused": [Function],
                    "mutators": Object {
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "shift": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                    },
                    "pauseValidation": [Function],
                    "registerField": [Function],
                    "reset": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                  }
                }
                render={[Function]}
                validate={[Function]}
              >
                <div>
                  Custom component
                </div>
              </Field>
            </ReactFinalForm(Field)>
          </FieldProvider>
        </customComponent>
      </FieldWrapper>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render single field from defined componentTypes 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "text-field": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper>
      <FieldWrapper
        component={[Function]}
        componentType="text-field"
        formOptions={
          Object {
            "renderForm": [Function],
          }
        }
        name="foo"
        validate={
          Array [
            undefined,
          ]
        }
      >
        <FieldProvider
          FieldProvider={[Function]}
          component={[Function]}
          formOptions={
            Object {
              "renderForm": [Function],
            }
          }
          name="foo"
          validate={[Function]}
        >
          <ReactFinalForm(Field)
            FieldProvider={[Function]}
            component={[Function]}
            formOptions={
              Object {
                "renderForm": [Function],
              }
            }
            name="foo"
            validate={[Function]}
          >
            <Field
              FieldProvider={[Function]}
              component={[Function]}
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              format={[Function]}
              name="foo"
              parse={[Function]}
              reactFinalForm={
                Object {
                  "batch": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "destroyOnUnregister": false,
                  "focus": [Function],
                  "getFieldState": [Function],
                  "getRegisteredFields": [Function],
                  "getState": [Function],
                  "initialize": [Function],
                  "isValidationPaused": [Function],
                  "mutators": Object {
                    "insert": [Function],
                    "move": [Function],
                    "pop": [Function],
                    "push": [Function],
                    "remove": [Function],
                    "shift": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                  },
                  "pauseValidation": [Function],
                  "registerField": [Function],
                  "reset": [Function],
                  "resumeValidation": [Function],
                  "setConfig": [Function],
                  "submit": [Function],
                  "subscribe": [Function],
                }
              }
              validate={[Function]}
            >
              <Component
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                input={
                  Object {
                    "name": "foo",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "value": "",
                  }
                }
                meta={
                  Object {
                    "active": false,
                    "data": Object {},
                    "dirty": false,
                    "dirtySinceLastSubmit": false,
                    "error": undefined,
                    "initial": undefined,
                    "invalid": false,
                    "modified": false,
                    "pristine": true,
                    "submitError": undefined,
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "touched": false,
                    "valid": true,
                    "visited": false,
                  }
                }
              >
                <div
                  formOptions={
                    Object {
                      "renderForm": [Function],
                    }
                  }
                  input={
                    Object {
                      "name": "foo",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "value": "",
                    }
                  }
                  meta={
                    Object {
                      "active": false,
                      "data": Object {},
                      "dirty": false,
                      "dirtySinceLastSubmit": false,
                      "error": undefined,
                      "initial": undefined,
                      "invalid": false,
                      "modified": false,
                      "pristine": true,
                      "submitError": undefined,
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "touched": false,
                      "valid": true,
                      "visited": false,
                    }
                  }
                >
                  TextField
                </div>
              </Component>
            </Field>
          </ReactFinalForm(Field)>
        </FieldProvider>
      </FieldWrapper>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render single field from with custom componentType 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper>
      <FieldWrapper
        component={[Function]}
        componentType="custom-component"
        formOptions={
          Object {
            "renderForm": [Function],
          }
        }
        name="foo"
        validate={
          Array [
            undefined,
          ]
        }
      >
        <customComponent
          FieldProvider={[Function]}
          formOptions={
            Object {
              "renderForm": [Function],
            }
          }
          name="foo"
          validate={[Function]}
        >
          <div
            name="foo"
            validate={[Function]}
          >
            Custom component
          </div>
        </customComponent>
      </FieldWrapper>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;
